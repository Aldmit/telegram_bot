
from aiogram import Bot, types
from aiogram import F # –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ—É —Å –º–∏–Ω–∏–º—É–º–æ–º –∫–æ–¥–∞

from aiogram.filters.command import Command, CommandObject, CommandStart # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —Å—Ö–µ–º–µ Command('–∫–æ–º–∞–Ω–¥–∞')
from aiogram.types import Message,MessageEntity,FSInputFile, URLInputFile, BufferedInputFile, InputTextMessageContent, InlineQueryResultArticle # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏

from aiogram.utils.keyboard import ReplyKeyboardBuilder # –ü–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
from aiogram.utils.keyboard import InlineKeyboardBuilder # –ò–Ω–ª–∞–π–Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from ..db_functions import *
from ..word_generator import *
from ..level_system import *


from aiogram import Router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()


class ChiStatus(StatesGroup):
    CHI_ON_1 = State()
    CHI_ON_2 = State()
    CHI_OFF = State()


@router.message(Command("chi"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(f"–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å, <b>{message.from_user.first_name}</b> :3")

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–¥, –µ—Å–ª–∏ –±–¥ –Ω–µ—Ç - —Å–æ–∑–¥–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å - –∏–¥—ë–º –¥–∞–ª—å—à–µ
    await db_create()
    
    try:
        await db_get_data(message.from_user.username, message.chat.id)
    except:
        await db_insert_user(message.from_user.username, message.chat.id)

    try:
        await db_update_wordlist(message.from_user.username, message.chat.id, "-", 0)
    except:
        await db_insert_wordlist(message.from_user.username, message.chat.id)
    
    try:
        await db_get_textgen(message.from_user.username, message.chat.id)
    except:
        await db_insert_textlist(message.from_user.username, message.chat.id)

    # print(f'ü´¢ü´¢ü´¢',end="")
    # for i in message.chat:
    #     print(i)
    
    # print(f'\nü´¢ü´¢ü´¢',end="")
    # for i in message.from_user:
    #     print(i)

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ Ê±âËØ≠", callback_data="chinese_train_1"
        ),types.InlineKeyboardButton(
            text="–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞", callback_data="chinese_train_2"
        )
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CHI!\n\n–ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã: —á–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞—ë—à—å, —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –∏ —Ç–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ.\n\n–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω–º–∞–Ω–¥—ã:\n\n/exit - –∑–∞–∫–æ–Ω—á–∏—Ç—å\n/status - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞?", reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "chinese_train_1")
async def start_chinese_train_1(callback: types.CallbackQuery, state: FSMContext):
    hanzi = await irg_generate(callback.from_user.username, callback.from_user.id)
    
    await callback.message.answer(f"–ù–∞–ø–∏—à–∏ –ø–∏–Ω—å–∏–Ω—å –∏—Ä–æ–≥–ª–∏—Ñ–∞:\n{hanzi[0]} - <tg-spoiler>{hanzi[1]}</tg-spoiler> - {hanzi[2]}\n")
    await state.set_state(ChiStatus.CHI_ON_1)
    await callback.answer(
        text="–í–≤–æ–¥–∏ –∫–∞–Ω–¥–∑–∏ –≤–∏–¥–∞ ‚ÄòÁà±‚Äô —á–µ—Ä–µ–∑ –ø–∏–Ω—å–∏–Ω—å.\n\n–ï—Å–ª–∏ –∑–∞–±—ã–ª - –Ω–∞–∂–º–∏ –Ω–∞ —Å–ø–æ–π–ª–µ—Ä, —á—Ç–æ–±—ã –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å.\n\n–ö–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞—ë—Ç —Ç–µ–±–µ +1 –±–∞–ª–ª, –∫–∞–∂–¥—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–Ω–∏–º–∞–µ—Ç -1.\n\n–£—Å–ø–µ—Ö–æ–≤!",
        show_alert=True
    )

@router.message(ChiStatus.CHI_ON_1, F.text)
async def get_message_base(message: types.Message, bot: Bot, state: FSMContext):
    user_data = await db_get_data(message.from_user.username, message.chat.id)
    
    if message.text.lower() == user_data[6]:
        answer = await streak(message.from_user.username, message.chat.id,1)
        if answer == 1:
            print('–°—Ç—Ä–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω')
        else:
            await message.answer(f'{answer}')

        hanzi = await irg_generate(message.from_user.username, message.chat.id)
        await message.answer(f"{hanzi[0]} - <tg-spoiler>{hanzi[1]}</tg-spoiler> - {hanzi[2]}\n")
        
    elif message.text.lower() == '/exit':
        await state.set_state(ChiStatus.CHI_OFF)
        await message.answer(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â—ë:3")

    elif message.text.lower() == '/status':
        user_data = await db_get_data(message.from_user.username, message.chat.id)
        print(user_data)
        await message.answer(f"{user_data[0]}-{user_data[1]}\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_data[2]}\n–£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–≤: {user_data[3]}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {user_data[4]}\n–î–µ–π—Å—Ç–≤—É—é—â–∏–π —Å—Ç—Ä–∏–∫: {user_data[5]}")
        await message.answer(f"–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º:\n/wordlist ‚Äì —Å–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–≤–∞\n/skip ‚Äì —Å–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ\n/restore [—Ö–∞–Ω–¥–∑–∏] ‚Äì –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–æ")

    elif message.text.lower() == '/wordlist':
        wordlist = await db_update_wordlist(message.from_user.username, message.chat.id,'-',0)
        await message.answer(', '.join(wordlist.values()))

    elif message.text.lower() == '/skip':
        user_data = await db_get_data(message.from_user.username, message.chat.id)
        wordlist = await db_update_wordlist(message.from_user.username, message.chat.id,user_data[6],1)
        await message.answer(f"–ö–∞–Ω–¥–∑–∏ {user_data[6]} —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ :3")

        hanzi = await irg_generate(message.from_user.username, message.chat.id)
        await message.answer(f"{hanzi[0]} - <tg-spoiler>{hanzi[1]}</tg-spoiler> - {hanzi[2]}\n")
    
    elif '/restore' in message.text.lower():
        split_message = message.text.lower().split(' ', maxsplit=1)

        try:
            if split_message[1] is None:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
                return

            wordlist = await db_update_wordlist(message.from_user.username, message.chat.id,'-',0)
            list_with_words = ', '.join(wordlist.values())
            if split_message[1] not in list_with_words:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –≤ –≤–æ—Ä–¥–ª–∏—Å—Ç–µ —Å–ª–æ–≤–∞ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞:\n"
                    "/restore [hanzi]\n"
                    "/restore Áà±"
                )
                return
        except:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                "/restore hanzi\n"
                "/restore Áà±"
            )
            return
        await db_update_wordlist(message.from_user.username, message.chat.id, split_message[1], -1)
        
        await message.answer(f"–ö–∞–Ω–¥–∑–∏ {split_message[1]} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è :3")

        # hanzi = await irg_generate(message.from_user.username, message.chat.id)
        # await message.answer(f"{hanzi[0]} - <tg-spoiler>{hanzi[1]}</tg-spoiler> - {hanzi[2]}\n")
        
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–µ
    elif '/info' in message.text.lower():
        split_message = message.text.lower().split(' ', maxsplit=1)

        try:
            if split_message[1] is None:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
                return
        
            answer = await get_hanzi_info(split_message[1])
            await message.answer(f'{answer[0]} -> {answer[1]} -> {answer[2]}')

        except:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                "/info hanzi\n"
                "/info Áà±"
            )
            return
        
    else:
        if await streak(message.from_user.username, message.chat.id,-1) == -1:
            print('–°—Ç—Ä–∏–∫ —É–º–µ–Ω—å—à–µ–Ω')
        await message.answer(f"–ù–µ –≤–µ—Ä–Ω–æ, {user_data[7]}")





# @router.message(ChiStatus.CHI_ON, Command("restore"))
# async def set_user_status(message: Message,command: CommandObject):
#     if command.args is None:
#         await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
#         return
    
#     try:
#         hanzi = command.args

#     except ValueError:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
#             "/restore hanzi\n"
#             "/restore Áà±"
#         )
#         return
#     word = await db_update_wordlist(message.from_user.username, message.chat.id, hanzi, -1)
#     await message.answer(f"–°–ª–æ–≤–æ {hanzi} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")








@router.callback_query(F.data == "chinese_train_2")
async def start_chinese_train_2(callback: types.CallbackQuery, state: FSMContext):

    a = await db_update_textlist(callback.from_user.username, callback.from_user.id)

    await callback.message.answer(f"{(await db_get_textgen(callback.from_user.username, callback.from_user.id)).replace(',', '')}")
    
    await state.set_state(ChiStatus.CHI_ON_2)
    await callback.answer(
        text="–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏–∑ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å. –ü–µ—Ä–µ–ø–∏—à–∏ –µ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ—ë –∑–Ω–∞–Ω–∏–µ.\n\n–£—Å–ø–µ—Ö–æ–≤!",
        show_alert=True
    )


@router.message(ChiStatus.CHI_ON_2, F.text)
async def get_message_base(message: types.Message, bot: Bot, state: FSMContext):
    text_gen = await db_get_textgen(message.from_user.username, message.chat.id)
    text_gen = text_gen.replace(',','')

    if message.text.lower() == text_gen:
        await db_update_textlist(message.from_user.username, message.chat.id)
        await message.answer(f"{(await db_get_textgen(message.from_user.username, message.chat.id)).replace(',', '')}")

        
    elif message.text.lower() == '/exit':
        await state.set_state(ChiStatus.CHI_OFF)
        await message.answer(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â—ë:3")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–µ
    elif '/info' in message.text.lower():
        split_message = message.text.lower().split(' ', maxsplit=1)

        try:
            if split_message[1] is None:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
                return
        
            answer = await get_hanzi_info(split_message[1])
            await message.answer(f'{answer[0]} -> {answer[1]} -> {answer[2]}')

        except:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                "/info hanzi\n"
                "/info Áà±"
            )
            return
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤
    elif message.text.lower() == '/wordlist':
        wordlist = await db_update_wordlist(message.from_user.username, message.chat.id,'-',0)
        await message.answer(', '.join(wordlist.values()))

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
    elif '/restore' in message.text.lower():
        split_message = message.text.lower().split(' ', maxsplit=1)

        try:
            if split_message[1] is None:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
                return

            wordlist = await db_update_wordlist(message.from_user.username, message.chat.id,'-',0)
            list_with_words = ', '.join(wordlist.values())
            if split_message[1] not in list_with_words:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –≤ –≤–æ—Ä–¥–ª–∏—Å—Ç–µ —Å–ª–æ–≤–∞ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞:\n"
                    "/restore [hanzi]\n"
                    "/restore Áà±"
                )
                return
        except:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                "/restore hanzi\n"
                "/restore Áà±"
            )
            return
       
        await db_update_wordlist(message.from_user.username, message.chat.id, split_message[1], -1)
        
        await message.answer(f"–ö–∞–Ω–¥–∑–∏ {split_message[1]} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è :3")

        # hanzi = await irg_generate(message.from_user.username, message.chat.id)
        # await message.answer(f"{hanzi[0]} - <tg-spoiler>{hanzi[1]}</tg-spoiler> - {hanzi[2]}\n")
        
    else:
        answer = list()
        user_message = ""
        i = 0

        got_hanzi_text = (await db_get_textgen(message.from_user.username, message.chat.id)).split(',')

        while i < len(got_hanzi_text):
            answer = await get_hanzi_info(got_hanzi_text[i])
            user_message += f"‚ñ´ {answer[0]} > {answer[1]} > {answer[2]}\n"
            i +=1

        await message.answer(f"–ù–µ –≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:3\n\n= = = –ü–æ–¥—Å–∫–∞–∑–∫–∞ = = =\n{user_message}")



@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–≥—Ä–∞: CHI\n\n–ß—Ç–æ–±—ã –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–µ—ë, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫—É—é —Ä–∞—Å—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã '–ü–∏–Ω—å–∏–Ω—å - —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π'\n\n –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–±–∏—Ä–∞–π /chi –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ :3")




